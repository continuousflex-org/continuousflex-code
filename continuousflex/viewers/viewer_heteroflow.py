# **************************************************************************
# * Authors:    Mohamad Harastani            (mohamad.harastani@upmc.fr)
# *
# * This program is free software; you can redistribute it and/or modify
# * it under the terms of the GNU General Public License as published by
# * the Free Software Foundation; either version 2 of the License, or
# * (at your option) any later version.
# *
# * This program is distributed in the hope that it will be useful,
# * but WITHOUT ANY WARRANTY; without even the implied warranty of
# * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# * GNU General Public License for more details.
# *
# * You should have received a copy of the GNU General Public License
# * along with this program; if not, write to the Free Software
# * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA
# * 02111-1307  USA
# *
# *  All comments concerning this program package may be sent to the
# *  e-mail address 'scipion@cnb.csic.es'
# *
# **************************************************************************
"""
This module implement the wrappers aroung Xmipp CL2D protocol
visualization program.
"""
from continuousflex.protocols.protocol_heteroflow import FlexProtHeteroFlow
from .plotter_vol import FlexNmaVolPlotter
from pwem.viewers import EmProtocolViewer
from pyworkflow.protocol.params import LabelParam
from pyworkflow.viewer import ProtocolViewer, DESKTOP_TKINTER, WEB_DJANGO
from pwem.viewers import ObjectView
import numpy as np
import matplotlib.pyplot as plt

OBJCMD_NMA_PLOTDIST = "Plot distance profile"
OBJCMD_NMA_VMD = "Display VMD animation"

FIGURE_LIMIT_NONE = 0
FIGURE_LIMITS = 1

X_LIMITS_NONE = 0
X_LIMITS = 1
Y_LIMITS_NONE = 0
Y_LIMITS = 1
Z_LIMITS_NONE = 0
Z_LIMITS = 1

class FlexHeteroFlowViewer(EmProtocolViewer):
    """ Visualization of results from the HeteroFlow protocol
    """
    _label = 'viewer heteroflow'
    _targets = [FlexProtHeteroFlow]
    _environments = [DESKTOP_TKINTER, WEB_DJANGO]

    def __init__(self, **kwargs):
        ProtocolViewer.__init__(self, **kwargs)
        self._data = None

    def _defineParams(self, form):
        form.addSection(label='Visualization')
        form.addParam('displayVolumes', LabelParam,
                      label="Display warped volumes",
                      help="Display the volumes that are generated by applying the calculated optical flow of each of "
                           "the input volumes on the reference")
        form.addParam('displayHistCC', LabelParam,
                      label="Histogram of normalized cross correlation",
                      help="Histogram of the normalized cross correlation between the input volumes and "
                           "the warped reference")
        form.addParam('displayHistmsd', LabelParam,
                      label="Histogram of mean absolute distance",
                      help="Histogram of the mean square distance between the input volumes and "
                           "the warped reference")
        form.addParam('displayHistmad', LabelParam,
                      label="Histogram of normalized cross correlation",
                      help="Histogram of the mean absolute distance between the input volumes and "
                           "the warped reference")

    def _getVisualizeDict(self):
        return {'displayVolumes': self._viewVolumes,
                'displayHistCC': self._viewParam,
                'displayHistmsd': self._viewParam,
                'displayHistmad': self._viewParam,
                }

    def _viewVolumes(self, paramName):
        volumes = self.protocol.WarpedRefByFlows
        return [ObjectView(self._project, volumes.strId(), volumes.getFileName())]


    def _viewParam(self, paramName):
        datamat_fn = self.protocol._getExtraPath('cc_msd_mad.txt')
        datamat = np.loadtxt(datamat_fn, delimiter=' ')
        if paramName == 'displayHistCC':
            plt.figure()
            plt.hist(datamat[:, 0])
            # plt.xlim(0,1)
            plt.title('Histogram of normalized cross correlation between\n warped reference by '
                      'optical flows (estimated volumes) and the input volumes')
            plt.xlabel('Cross correlation')
            plt.ylabel('Number of volumes')
            plt.show()
        elif paramName == 'displayHistmsd':
            plt.figure()
            plt.hist(datamat[:, 1])
            plt.title('Histogram of normalized mean square distance between warped\n reference by '
                      'optical flows (estimated volumes) and the input volumes')
            plt.xlabel('normalized mean square distance')
            plt.ylabel('Number of volumes')
            plt.show()
        elif paramName == 'displayHistmad':
            plt.figure()
            plt.hist(datamat[:, 2])
            plt.title('Histogram of normalized mean absolute distance between warped\n reference by '
                      'optical flows (estimated volumes) and the input volumes')
            plt.xlabel('normalized absolute square distance')
            plt.ylabel('Number of volumes')
            plt.show()
        pass





